   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"diskio.c"
  16              		.section	.text.disk_initialize,"ax",%progbits
  17              		.align	1
  18              		.global	disk_initialize
  19              		.thumb
  20              		.thumb_func
  22              	disk_initialize:
  23              		@ args = 0, pretend = 0, frame = 0
  24              		@ frame_needed = 0, uses_anonymous_args = 0
  25 0000 10B5     		push	{r4, lr}
  26 0002 58B9     		cbnz	r0, .L5
  27 0004 0748     		ldr	r0, .L6
  28 0006 0478     		ldrb	r4, [r0, #0]	@ zero_extendqisi2
  29 0008 4369     		ldr	r3, [r0, #20]
  30 000a 043C     		subs	r4, r4, #4
  31 000c 18BF     		it	ne
  32 000e 0124     		movne	r4, #1
  33 0010 9847     		blx	r3
  34 0012 20B1     		cbz	r0, .L2
  35 0014 44F00401 		orr	r1, r4, #4
  36 0018 CCB2     		uxtb	r4, r1
  37 001a 00E0     		b	.L2
  38              	.L5:
  39 001c 0224     		movs	r4, #2
  40              	.L2:
  41 001e 2046     		mov	r0, r4
  42 0020 10BD     		pop	{r4, pc}
  43              	.L7:
  44 0022 00BF     		.align	2
  45              	.L6:
  46 0024 00000000 		.word	MMCD1
  48              		.section	.text.disk_status,"ax",%progbits
  49              		.align	1
  50              		.global	disk_status
  51              		.thumb
  52              		.thumb_func
  54              	disk_status:
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57 0000 10B5     		push	{r4, lr}
  58 0002 58B9     		cbnz	r0, .L12
  59 0004 0748     		ldr	r0, .L13
  60 0006 0478     		ldrb	r4, [r0, #0]	@ zero_extendqisi2
  61 0008 4369     		ldr	r3, [r0, #20]
  62 000a 043C     		subs	r4, r4, #4
  63 000c 18BF     		it	ne
  64 000e 0124     		movne	r4, #1
  65 0010 9847     		blx	r3
  66 0012 20B1     		cbz	r0, .L9
  67 0014 44F00401 		orr	r1, r4, #4
  68 0018 CCB2     		uxtb	r4, r1
  69 001a 00E0     		b	.L9
  70              	.L12:
  71 001c 0224     		movs	r4, #2
  72              	.L9:
  73 001e 2046     		mov	r0, r4
  74 0020 10BD     		pop	{r4, pc}
  75              	.L14:
  76 0022 00BF     		.align	2
  77              	.L13:
  78 0024 00000000 		.word	MMCD1
  80              		.section	.text.disk_read,"ax",%progbits
  81              		.align	1
  82              		.global	disk_read
  83              		.thumb
  84              		.thumb_func
  86              	disk_read:
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  89 0000 38B5     		push	{r3, r4, r5, lr}
  90 0002 0C46     		mov	r4, r1
  91 0004 1D46     		mov	r5, r3
  92 0006 C8B9     		cbnz	r0, .L24
  93 0008 1048     		ldr	r0, .L27
  94 000a 0378     		ldrb	r3, [r0, #0]	@ zero_extendqisi2
  95 000c 042B     		cmp	r3, #4
  96 000e 17D1     		bne	.L21
  97 0010 1146     		mov	r1, r2
  98 0012 FFF7FEFF 		bl	mmcStartSequentialRead
  99 0016 40B1     		cbz	r0, .L25
 100 0018 14E0     		b	.L26
 101              	.L19:
 102 001a 2146     		mov	r1, r4
 103 001c FFF7FEFF 		bl	mmcSequentialRead
 104 0020 90B9     		cbnz	r0, .L23
 105 0022 013D     		subs	r5, r5, #1
 106 0024 04F50074 		add	r4, r4, #512
 107 0028 EDB2     		uxtb	r5, r5
 108              	.L25:
 109 002a 0848     		ldr	r0, .L27
 110 002c 002D     		cmp	r5, #0
 111 002e F4D1     		bne	.L19
 112 0030 FFF7FEFF 		bl	mmcStopSequentialRead
 113 0034 0030     		adds	r0, r0, #0
 114 0036 18BF     		it	ne
 115 0038 0120     		movne	r0, #1
 116 003a 38BD     		pop	{r3, r4, r5, pc}
 117              	.L24:
 118 003c 0420     		movs	r0, #4
 119 003e 38BD     		pop	{r3, r4, r5, pc}
 120              	.L21:
 121 0040 0320     		movs	r0, #3
 122 0042 38BD     		pop	{r3, r4, r5, pc}
 123              	.L26:
 124 0044 0120     		movs	r0, #1
 125 0046 38BD     		pop	{r3, r4, r5, pc}
 126              	.L23:
 127 0048 0120     		movs	r0, #1
 128 004a 38BD     		pop	{r3, r4, r5, pc}
 129              	.L28:
 130              		.align	2
 131              	.L27:
 132 004c 00000000 		.word	MMCD1
 134              		.section	.text.disk_write,"ax",%progbits
 135              		.align	1
 136              		.global	disk_write
 137              		.thumb
 138              		.thumb_func
 140              	disk_write:
 141              		@ args = 0, pretend = 0, frame = 0
 142              		@ frame_needed = 0, uses_anonymous_args = 0
 143 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 144 0002 0C46     		mov	r4, r1
 145 0004 1646     		mov	r6, r2
 146 0006 1D46     		mov	r5, r3
 147 0008 E8B9     		cbnz	r0, .L39
 148 000a 144F     		ldr	r7, .L42
 149 000c 3B78     		ldrb	r3, [r7, #0]	@ zero_extendqisi2
 150 000e 042B     		cmp	r3, #4
 151 0010 1BD1     		bne	.L35
 152 0012 7869     		ldr	r0, [r7, #20]
 153 0014 8047     		blx	r0
 154 0016 D0B9     		cbnz	r0, .L36
 155 0018 3846     		mov	r0, r7
 156 001a 3146     		mov	r1, r6
 157 001c FFF7FEFF 		bl	mmcStartSequentialWrite
 158 0020 40B1     		cbz	r0, .L40
 159 0022 16E0     		b	.L41
 160              	.L33:
 161 0024 2146     		mov	r1, r4
 162 0026 FFF7FEFF 		bl	mmcSequentialWrite
 163 002a A0B9     		cbnz	r0, .L38
 164 002c 013D     		subs	r5, r5, #1
 165 002e 04F50074 		add	r4, r4, #512
 166 0032 EDB2     		uxtb	r5, r5
 167              	.L40:
 168 0034 0948     		ldr	r0, .L42
 169 0036 002D     		cmp	r5, #0
 170 0038 F4D1     		bne	.L33
 171 003a FFF7FEFF 		bl	mmcStopSequentialWrite
 172 003e 0030     		adds	r0, r0, #0
 173 0040 18BF     		it	ne
 174 0042 0120     		movne	r0, #1
 175 0044 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 176              	.L39:
 177 0046 0420     		movs	r0, #4
 178 0048 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 179              	.L35:
 180 004a 0320     		movs	r0, #3
 181 004c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 182              	.L36:
 183 004e 0220     		movs	r0, #2
 184 0050 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 185              	.L41:
 186 0052 0120     		movs	r0, #1
 187 0054 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 188              	.L38:
 189 0056 0120     		movs	r0, #1
 190 0058 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 191              	.L43:
 192 005a 00BF     		.align	2
 193              	.L42:
 194 005c 00000000 		.word	MMCD1
 196              		.section	.text.disk_ioctl,"ax",%progbits
 197              		.align	1
 198              		.global	disk_ioctl
 199              		.thumb
 200              		.thumb_func
 202              	disk_ioctl:
 203              		@ args = 0, pretend = 0, frame = 0
 204              		@ frame_needed = 0, uses_anonymous_args = 0
 205              		@ link register save eliminated.
 206 0000 48B9     		cbnz	r0, .L51
 207 0002 11B1     		cbz	r1, .L47
 208 0004 0229     		cmp	r1, #2
 209 0006 08D1     		bne	.L52
 210 0008 01E0     		b	.L53
 211              	.L47:
 212 000a 0846     		mov	r0, r1
 213 000c 7047     		bx	lr
 214              	.L53:
 215 000e 4FF40073 		mov	r3, #512	@ movhi
 216 0012 1380     		strh	r3, [r2, #0]	@ movhi
 217 0014 7047     		bx	lr
 218              	.L51:
 219 0016 0420     		movs	r0, #4
 220 0018 7047     		bx	lr
 221              	.L52:
 222 001a 0420     		movs	r0, #4
 223 001c 7047     		bx	lr
 225              		.section	.text.get_fattime,"ax",%progbits
 226              		.align	1
 227              		.global	get_fattime
 228              		.thumb
 229              		.thumb_func
 231              	get_fattime:
 232              		@ args = 0, pretend = 0, frame = 0
 233              		@ frame_needed = 0, uses_anonymous_args = 0
 234              		@ link register save eliminated.
 235 0000 0020     		movs	r0, #0
 236 0002 7047     		bx	lr
 238              		.ident	"GCC: (Sourcery CodeBench Lite 2012.03-56) 4.6.3"
DEFINED SYMBOLS
                            *ABS*:00000000 diskio.c
     /tmp/cc1i16PT.s:17     .text.disk_initialize:00000000 $t
     /tmp/cc1i16PT.s:22     .text.disk_initialize:00000000 disk_initialize
     /tmp/cc1i16PT.s:46     .text.disk_initialize:00000024 $d
     /tmp/cc1i16PT.s:49     .text.disk_status:00000000 $t
     /tmp/cc1i16PT.s:54     .text.disk_status:00000000 disk_status
     /tmp/cc1i16PT.s:78     .text.disk_status:00000024 $d
     /tmp/cc1i16PT.s:81     .text.disk_read:00000000 $t
     /tmp/cc1i16PT.s:86     .text.disk_read:00000000 disk_read
     /tmp/cc1i16PT.s:132    .text.disk_read:0000004c $d
     /tmp/cc1i16PT.s:135    .text.disk_write:00000000 $t
     /tmp/cc1i16PT.s:140    .text.disk_write:00000000 disk_write
     /tmp/cc1i16PT.s:194    .text.disk_write:0000005c $d
     /tmp/cc1i16PT.s:197    .text.disk_ioctl:00000000 $t
     /tmp/cc1i16PT.s:202    .text.disk_ioctl:00000000 disk_ioctl
     /tmp/cc1i16PT.s:226    .text.get_fattime:00000000 $t
     /tmp/cc1i16PT.s:231    .text.get_fattime:00000000 get_fattime

UNDEFINED SYMBOLS
MMCD1
mmcStartSequentialRead
mmcSequentialRead
mmcStopSequentialRead
mmcStartSequentialWrite
mmcSequentialWrite
mmcStopSequentialWrite
